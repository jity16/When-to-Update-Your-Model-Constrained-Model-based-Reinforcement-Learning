#!/usr/bin/env python3

import sys
import os
import json
import datetime

if len(sys.argv) - 1 != 5:
    sys.stderr.write("Usage: %s <algo_name> <env_name> <freq_name> <seed> <gpu_id>\n" % sys.argv[0])
    sys.exit(1)

algo_name = sys.argv[1]
env_name = sys.argv[2]
freq_name = sys.argv[3]
seed = int(sys.argv[4])
gpu_id = int(sys.argv[5])

try:
    f = open("run_status/last_run_id.txt", "r")
    last_run_id = int(f.read())
    f.close()
except:
    last_run_id = 0


new_run_id = last_run_id + 1
f = open("run_status/last_run_id.txt", "w")
f.write("%s" % new_run_id)
f.close()

run_id = new_run_id

command_line = "".join([
    "cd cat-mbrl-lib/ && ",
    "CUDA_VISIBLE_DEVICES=%s " % gpu_id,
    "des=__catrunner_%s__ " % run_id,
    "algo=%s " % algo_name,
    "freq=custom__%s " % freq_name,
    "seed_override=%s " % seed,
    "python -m mbrl.examples.main ",
    "algorithm=mbpo ",
    "overrides=%s " % env_name,
    "> ../run_status/stdout_%s.txt " % run_id,
    "2> ../run_status/stderr_%s.txt " % run_id,
])

status = {
    "run_id": new_run_id,
    "algo_name": algo_name,
    "env_name": env_name,
    "freq_name": freq_name,
    "seed": seed,
    "gpu_id": gpu_id,
    "submit_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    "command_line": command_line,
}

f = open("run_status/status_%s.txt" % new_run_id, "w")
f.write(json.dumps(status))
f.close()

os.system("tools/do_run.exe %s %s %s %s %s %s&" % (gpu_id, new_run_id, algo_name, freq_name, seed, env_name))

print("run_id %s started" % new_run_id)
